import streamlit as st
import pandas as pd
import numpy as np
import re
import os
import base64
from datetime import datetime, timedelta
from scipy.io.wavfile import write
from pathlib import Path

# ================ CONFIGURA√á√ïES GLOBAIS ================
CONFIG = {
    'colors': {
        'primary': '#FF5733',
        'secondary': '#C70039',
        'text': '#2c3e50',
        'background': '#f8f9fa'
    },
    'page_title': 'Painel BDM',
    'page_icon': 'assets/bdm.ico',
    'layout': 'wide',
    'data_file': 'chamados.csv',
    'sound_settings': {
        'sample_rate': 44100,
        'duration': 2,
        'frequency': 440,
        'alert_path': Path('assets/som_alerta.wav')   
    },
    'css_file': 'style.css',
    'validations': {
        'phone_regex': r'^\(\d{2}\) \d{4,5}-\d{4}$',
        'plate_regex': r'^[A-Za-z]{3}[- ]?[\dA-Za-z]{4}$',
        'password_regex': r'^\d{3}$',
        'name_regex': r'^[A-Za-z√Ä-√ø\s]{5,}$'
    }
}

# ================ INICIALIZA√á√ÉO DO SESSION STATE ================
SESSION_DEFAULTS = {
    'last_update': datetime.now(),
    'last_call_time': None,
    'sound_played': False,
    'som_ativado': True,
    'auto_update': False,
    'current_mode': None
}

for key, value in SESSION_DEFAULTS.items():
    if key not in st.session_state:
        st.session_state[key] = value

# ================ FUN√á√ïES DE UTILIDADE ================
def setup_page():
    """Configura√ß√µes iniciais da p√°gina"""
    st.set_page_config(
        page_title=CONFIG['page_title'],
        layout=CONFIG['layout'],
        page_icon=CONFIG['page_icon']
    )
    
    Path('assets').mkdir(exist_ok=True)
    load_external_css(CONFIG['css_file'])
    ensure_alert_sound()

def load_external_css(file_path: str):
    """Carrega CSS externo"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            css = f.read()
        st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"Arquivo de estilo n√£o encontrado: {file_path}")

# ================ GERENCIAMENTO DE √ÅUDIO ================
def ensure_alert_sound():
    """Garante a exist√™ncia do arquivo de som"""
    sound_path = CONFIG['sound_settings']['alert_path']
    if not sound_path.exists():
        generate_alert_sound()

def generate_alert_sound():
    """Gera o arquivo de som"""
    settings = CONFIG['sound_settings']
    t = np.linspace(0, settings['duration'], int(settings['sample_rate'] * settings['duration']), False)
    wave = 0.5 * np.sin(2 * np.pi * settings['frequency'] * t)
    audio = np.int16(wave * 32767)
    write(str(settings['alert_path']), settings['sample_rate'], audio)

def play_alert_sound():
    """Reproduz o som de alerta uma √∫nica vez por chamado"""
    if st.session_state.som_ativado and not st.session_state.sound_played:
        try:
            with open(CONFIG['sound_settings']['alert_path'], 'rb') as f:
                audio_bytes = f.read()
                st.audio(audio_bytes, format='audio/wav', autoplay=True)
                st.session_state.sound_played = True
        except Exception as e:
            st.error(f"Falha ao reproduzir som: {str(e)}")

# ================ GERENCIAMENTO DE DADOS ================
def load_data() -> pd.DataFrame:
    """Carrega ou inicializa os dados"""
    columns = [
        'motorista', 'contato', 'transportadora', 'senha', 'placa',
        'cliente', 'vendedor', 'destino', 'doca', 'status', 'chamado_em'
    ]
    
    try:
        df = pd.read_csv(
            CONFIG['data_file'],
            parse_dates=['chamado_em'],
            dtype={col: str for col in columns if col != 'chamado_em'}
        )
        df['doca'] = df['doca'].fillna('')
        df['destino'] = df['destino'].fillna('')
        return df
    except (FileNotFoundError, pd.errors.EmptyDataError):
        return pd.DataFrame(columns=columns)
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")
        return pd.DataFrame(columns=columns)

def save_data(df: pd.DataFrame):
    """Salva os dados atualizados"""
    try:
        df.to_csv(CONFIG['data_file'], index=False)
    except Exception as e:
        st.error(f"Erro ao salvar dados: {str(e)}")

# ================ COMPONENTES DA INTERFACE ================
def render_header():
    """Renderiza o cabe√ßalho com √≠cone correto"""
    try:
        # Converter o √≠cone para base64
        with open(CONFIG['page_icon'], "rb") as f:
            icon_data = base64.b64encode(f.read()).decode()
        
        st.markdown(f'''
            <div class='header'>
                <img src="data:image/x-icon;base64,{icon_data}" width="30" style="vertical-align: middle;">
                Painel de Chamadas BDM
            </div>
        ''', unsafe_allow_html=True)
        
    except FileNotFoundError:
        st.error("√çcone n√£o encontrado em: {}".format(CONFIG['page_icon']))
        st.markdown('''
            <div class='header'>
                Painel de Chamadas BDM
            </div>
        ''', unsafe_allow_html=True)

def render_controls() -> dict:
    """Renderiza os controles da sidebar"""
    with st.sidebar:
        st.title('Controles')
        return {
            'modo': st.selectbox('Modo', ['Painel ADM', 'Painel P√°tio', 'Painel Motorista']),
            'som_ativado': st.checkbox('Som Ativo', st.session_state.som_ativado),
            'auto_update': st.checkbox('Auto Refresh (15s)', st.session_state.auto_update)
        }

# ================ PAINEL ADMINISTRATIVO ================
def render_admin_panel(df: pd.DataFrame):
    """Interface do Painel Administrativo"""
    st.subheader('Gest√£o de Motoristas')
    
    with st.expander('üìä Estat√≠sticas Operacionais'):
        col1, col2, col3 = st.columns(3)
        col1.metric("Total Cadastrados", len(df))
        col2.metric("Aguardando", len(df[df['status'] == 'Aguardando']))
        col3.metric("Em Opera√ß√£o", len(df[df['status'].isin(['Chamado', 'Em Progresso'])]))

    with st.form("Novo Motorista", clear_on_submit=True):
        st.markdown("**Dados Obrigat√≥rios** (*)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            motorista = st.text_input(
                'Nome Completo*',
                placeholder="Ex: Jo√£o da Silva"
            )
            
            contato = st.text_input(
                'Contato*', 
                max_chars=15,
                placeholder="(XX) 99999-9999"
            )
            
            placa = st.text_input(
                'Placa do Ve√≠culo*',
                max_chars=7,
                placeholder="AAA0A00"
            )

        with col2:
            senha = st.text_input(
                'Senha de Acesso',
                max_chars=3,
                placeholder="123"
            )
            
            transportadora = st.text_input(
                'Transportadora*',
                placeholder="Nome da transportadora"
            )
            
            cliente = st.text_input(
                'Cliente',
                placeholder="Destinat√°rio da carga"
            )

        vendedor = st.text_input('Vendedor Respons√°vel')

        if st.form_submit_button('Cadastrar Motorista'):
            errors = []
            valid = CONFIG['validations']

            if not motorista or not re.match(valid['name_regex'], motorista, re.IGNORECASE):
                errors.append("Nome inv√°lido (m√≠nimo 5 caracteres alfab√©ticos)")
                
            if not contato or not re.match(valid['phone_regex'], contato):
                errors.append("Formato de contato inv√°lido (use (XX) XXXX-XXXX)")
                
            if not placa or not re.fullmatch(valid['plate_regex'], placa.upper().replace(' ', '').replace('-', ''), re.IGNORECASE):
                errors.append("Placa inv√°lida (formato incorreto)")
                
            if senha and not re.fullmatch(valid['password_regex'], senha):
                errors.append("Senha deve conter exatamente 3 d√≠gitos")

            if errors:
                for error in errors:
                    st.error(error)
            else:
                novo_registro = {
                    'motorista': motorista.title(),
                    'contato': contato,
                    'transportadora': transportadora.strip().title(),
                    'senha': senha or 'N/A',
                    'placa': placa.upper().replace('-', ''),
                    'cliente': cliente.title() if cliente else 'N√£o informado',
                    'vendedor': vendedor.title() if vendedor else 'N√£o informado',
                    'destino': '',
                    'doca': '',
                    'status': 'Aguardando',
                    'chamado_em': pd.NaT
                }
                
                df = pd.concat([df, pd.DataFrame([novo_registro])], ignore_index=True)
                save_data(df)
                st.success('Cadastro realizado com sucesso!')
                st.balloons()

    st.divider()
    st.dataframe(
        df[['motorista', 'placa', 'transportadora', 'status']],
        use_container_width=True,
        column_config={
            "status": st.column_config.SelectboxColumn(
                "Status",
                options=["Aguardando", "Chamado", "Em Progresso", "Finalizado"],
                default="Aguardando"
            )
        }
    )

# ================ PAINEL P√ÅTIO ================
def render_yard_panel(df: pd.DataFrame):
    """Interface de Controle Operacional"""
    st.subheader("Controle de Docas")
    
    # Mostrar opera√ß√µes em andamento
    operacoes_ativas = df[df['status'].isin(['Chamado', 'Em Progresso'])]
    
    if not operacoes_ativas.empty:
        st.markdown("### Opera√ß√µes em Andamento")
        for idx, row in operacoes_ativas.iterrows():
            with st.container(border=True):
                cols = st.columns([3, 1, 1, 2, 2])
                
                cols[0].markdown(f"""
                **Motorista:** {row['motorista']}  
                **Transportadora:** {row['transportadora']}  
                **Placa:** `{row['placa']}`
                """)
                
                cols[1].markdown(f"**Doca:**  \n`{row['doca'] or '---'}`")
                cols[2].markdown(f"**Destino:**  \n`{row['destino'] or '---'}`")
                
                with cols[3]:
                    nova_doca = st.text_input(
                        "Nova Doca",
                        value=row['doca'],
                        key=f'nova_doca_{idx}',
                        placeholder="N¬∫ doca"
                    )
                    
                with cols[4]:
                    novo_destino = st.text_input(
                        "Novo Destino",
                        value=row['destino'],
                        key=f'novo_destino_{idx}',
                        placeholder="Localiza√ß√£o"
                    )
                
                col_btn1, col_btn2 = st.columns(2)
                with col_btn1:
                    if st.button("üîÑ Atualizar", key=f'update_{idx}'):
                        df.at[idx, 'doca'] = nova_doca
                        df.at[idx, 'destino'] = novo_destino
                        df.at[idx, 'status'] = 'Em Progresso'
                        save_data(df)
                        st.rerun()
                
                with col_btn2:
                    if st.button("‚úÖ Finalizar", key=f'finish_{idx}', type='primary'):
                        df.at[idx, 'status'] = 'Finalizado'
                        save_data(df)
                        st.rerun()

    # Mostrar motoristas aguardando
    st.markdown("### Novos Chamados")
    aguardando = df[df['status'] == 'Aguardando']
    
    if aguardando.empty:
        st.info('Nenhum motorista aguardando')
        return

    for idx, row in aguardando.iterrows():
        with st.container(border=True):
            cols = st.columns([3, 1, 1, 2])
            
            cols[0].markdown(f"""
            **Motorista:** {row['motorista']}  
            **Transportadora:** {row['transportadora']}
            """)
            
            cols[1].metric("Placa", row['placa'])
            cols[2].metric("Senha", row['senha'])
            
            with cols[3]:
                doca = st.text_input(
                    "Doca Inicial",
                    key=f'doca_{idx}',
                    placeholder="N¬∫ doca"
                )
                destino = st.text_input(
                    "Destino Inicial",
                    key=f'dest_{idx}',
                    placeholder="Localiza√ß√£o"
                )
                
                if st.button("‚ñ∂Ô∏è Iniciar Opera√ß√£o", key=f'start_{idx}'):
                    df.at[idx, 'status'] = 'Chamado'
                    df.at[idx, 'chamado_em'] = datetime.now()
                    df.at[idx, 'doca'] = doca
                    df.at[idx, 'destino'] = destino
                    save_data(df)
                    st.rerun()

# ================ PAINEL MOTORISTA ================
def render_driver_panel(df: pd.DataFrame):
    """Interface de Informa√ß√µes para Motoristas"""
    st.subheader("Painel de Orienta√ß√£o")
    
    # Verificar opera√ß√µes ativas
    operacoes = df[df['status'].isin(['Chamado', 'Em Progresso'])].sort_values('chamado_em', ascending=False)
    
    if operacoes.empty:
        st.info('Nenhuma opera√ß√£o ativa no momento')
        st.session_state.sound_played = False
        return

    # Verificar novo chamado
    current_call = operacoes.iloc[0]['chamado_em']
    if st.session_state.last_call_time != current_call:
        st.session_state.last_call_time = current_call
        st.session_state.sound_played = False
    
    if not st.session_state.sound_played:
        play_alert_sound()
        st.session_state.sound_played = True

    # Exibir opera√ß√£o atual
    operacao = operacoes.iloc[0]
    with st.container(border=True):
        cols = st.columns([2, 1, 1, 2])
        
        cols[0].markdown(f"""
        ### {operacao['motorista']}
        **Placa:** {operacao['placa']}  
        **Transportadora:** {operacao['transportadora']}
        """)
        
        cols[1].markdown(f"""
        <div style="font-size:26px; color:{CONFIG['colors']['primary']}; 
                    font-weight:bold; text-align:center;">
        DOCA<br>
        {operacao['doca'] or '---'}
        </div>
        """, unsafe_allow_html=True)
        
        cols[2].markdown(f"""
        <div style="font-size:26px; color:{CONFIG['colors']['text']}; 
                    font-weight:bold; text-align:center;">
        DESTINO<br>
        {operacao['destino'] or '---'}
        </div>
        """, unsafe_allow_html=True)
        
        cols[3].markdown(f"""
        **In√≠cio da Opera√ß√£o:**  
        {operacao['chamado_em'].strftime('%d/%m/%Y %H:%M')}
        """)

# ================ CONTROLE DE ATUALIZA√á√ÉO ================
def handle_auto_refresh():
    """Gerencia a atualiza√ß√£o autom√°tica com intervalo de 15 segundos"""
    if st.session_state.auto_update and st.session_state.current_mode in ['Painel P√°tio', 'Painel Motorista']:
        now = datetime.now()
        elapsed = (now - st.session_state.last_update).total_seconds()
        
        if elapsed >= 15:
            st.session_state.last_update = now
            st.rerun()

# ================ EXECU√á√ÉO PRINCIPAL ================
def main():
    setup_page()
    render_header()
    
    controls = render_controls()
    st.session_state.current_mode = controls['modo']
    df = load_data()
    
    st.session_state.update({
        'som_ativado': controls['som_ativado'],
        'auto_update': controls['auto_update']
    })

    if controls['modo'] == 'Painel ADM':
        render_admin_panel(df)
    elif controls['modo'] == 'Painel P√°tio':
        render_yard_panel(df)
    else:
        render_driver_panel(df)

    handle_auto_refresh()
    
    # Exibir status de atualiza√ß√£o
    if st.session_state.auto_update and st.session_state.current_mode in ['Painel P√°tio', 'Painel Motorista']:
        st.markdown(f"""
        <div class='auto-update-status'>
            √öltima atualiza√ß√£o: {datetime.now().strftime('%H:%M:%S')}
        </div>
        """, unsafe_allow_html=True)

if __name__ == '__main__':
    main()